------------------------------------------------------------------------------------
---- Company: 
---- Engineer: 
---- 
---- Create Date: 07/14/2025 03:45:09 PM
---- Design Name: 
---- Module Name: top_module - Behavioral
---- Project Name: 
---- Target Devices: 
---- Tool Versions: 
---- Description: 
---- 
---- Dependencies: 
---- 
---- Revision:
---- Revision 0.01 - File Created
---- Additional Comments:
---- 
------------------------------------------------------------------------------------

--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.numeric_std.all;

--entity uart_top is
--  port (
--    Clk         : in  std_logic;                         -- 7.68 MHz clock input
--    i_RX_Serial : in  std_logic;                         -- UART RX input
--    o_TX_Serial : out std_logic                          -- UART TX output
--  );
--end uart_top;

--architecture Behavioral of uart_top is

--  -- UART RX signals
--  signal rx_done      : std_logic := '0';
--  signal rx_byte      : std_logic_vector(7 downto 0) := (others => '0');

--  -- UART TX signals
--  signal tx_dv        : std_logic := '0';
--  signal tx_byte      : std_logic_vector(7 downto 0) := (others => '0');
--  signal tx_active    : std_logic;
--  signal tx_done      : std_logic;
--  signal tx_triggered : std_logic := '0';

  
  
  
  
--  COMPONENT ila_0

--PORT (
--	clk : IN STD_LOGIC;



--	probe0 : IN STD_LOGIC; 
--	probe1 : IN STD_LOGIC_VECTOR(7 DOWNTO 0); 
--	probe2 : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
--	probe3 : IN STD_LOGIC
--);
--END COMPONENT  ;

--begin



--   your_instance_name : ila_0
--PORT MAP (
--	clk => clk,



--	probe0 => i_RX_Serial, 
--	probe1 => tx_byte, 
--	probe2 => rx_byte,
--	probe3 => tx_dv
--);


--  --------------------------------------------------------------------
--  -- UART RX Instance
--  --------------------------------------------------------------------
--  UART_RX_INST : entity work.UART_RX
--    port map (
--      Clk         => Clk,
--      i_RX_Serial => i_RX_Serial,
--      o_RX_Done   => rx_done,
--      o_RX_Byte   => rx_byte
--    );

--  --------------------------------------------------------------------
--  -- UART TX Instance
--  --------------------------------------------------------------------
--  UART_TX_INST : entity work.UART_TX
--    port map (
--      Clk         => Clk,
--      i_TX_Byte   => tx_byte,
--      i_TX_DV     => tx_dv,
--      o_TX_Active => tx_active,
--      o_TX_Serial => o_TX_Serial,
--      o_TX_Done   => tx_done
--    );

--  --------------------------------------------------------------------
--  -- Echo received byte to TX when done
--  --------------------------------------------------------------------
-- process(Clk)
--begin
--  if rising_edge(Clk) then

--    if rx_done = '1' and tx_active = '0' and tx_triggered = '0' then
--      tx_byte      <= rx_byte;
--      tx_dv        <= '1';
--      tx_triggered <= '1';

--    else
--      tx_dv <= '0';

--      -- Clear tx_triggered when transmission is done
--      if tx_done = '1' then
--        tx_triggered <= '0';
--      end if;

--    end if;
--  end if;
--end process;


--end Behavioral;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity uart_top is
  port (
    Clk         : in  std_logic;                         -- 7.68 MHz input
    i_RX_Serial : in  std_logic;                         -- RX line from PC/dock
    o_TX_Serial : out std_logic                          -- TX line to PC/dock
  );
end uart_top;

architecture Behavioral of uart_top is
  signal rx_done      : std_logic := '0';
  signal rx_byte      : std_logic_vector(7 downto 0) := (others => '0');

  signal tx_dv        : std_logic := '0';
  signal tx_byte      : std_logic_vector(7 downto 0) := (others => '0');
  signal tx_active    : std_logic;
  signal tx_done      : std_logic;
  signal tx_triggered : std_logic := '0';
    signal fifo_din, fifo_dout : std_logic_vector(7 downto 0);
  signal fifo_wr_en, fifo_rd_en : std_logic := '0';
  signal fifo_full, fifo_empty : std_logic;
   signal tx_load : std_logic := '0';
  signal tx_data : std_logic_vector(7 downto 0);

COMPONENT ila_0

PORT (
	clk : IN STD_LOGIC;



	probe0 : IN STD_LOGIC; 
	probe1 : IN STD_LOGIC_VECTOR(7 DOWNTO 0); 
	probe2 : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	probe3 : IN STD_LOGIC
);
END COMPONENT  ;

COMPONENT fifo_generator_0
  PORT (
    clk : IN STD_LOGIC;
    srst : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    full : OUT STD_LOGIC;
    empty : OUT STD_LOGIC
  );
END COMPONENT;

begin



   your_instance_name : ila_0
PORT MAP (
	clk => clk,



	probe0 => i_RX_Serial, 
	probe1 => tx_byte, 
	probe2 => rx_byte,
	probe3 => tx_dv
);



  UART_RX_INST : entity work.UART_RX
    port map (
      Clk         => Clk,
      i_RX_Serial => i_RX_Serial,
      o_RX_Done   => rx_done,
      o_RX_Byte   => rx_byte
    );

  UART_TX_INST : entity work.UART_TX
    port map (
      Clk         => Clk,
      i_TX_Byte   => tx_byte,
      i_TX_DV     => tx_dv,
      o_TX_Active => tx_active,
      o_TX_Serial => o_TX_Serial,
      o_TX_Done   => tx_done
    );
--  FIFO_INST : entity work.fifo_8x16
--    port map (
--      clk     => Clk,
--      reset   => '0',  -- use async reset if needed
--      wr_en   => fifo_wr_en,
--      rd_en   => fifo_rd_en,
--      din     => fifo_din,
--      dout    => fifo_dout,
--      full    => fifo_full,
--      empty   => fifo_empty
--    );

your_instance_name_1 : fifo_generator_0
  PORT MAP (
    clk => clk,
    srst => '0',
    din => fifo_din,
    wr_en => fifo_wr_en,
    rd_en => fifo_rd_en,
    dout => fifo_dout,
    full => fifo_full,
    empty => fifo_empty
  );


--    process(Clk)
--  begin
--    if rising_edge(Clk) then
--      fifo_wr_en <= '0';
--      fifo_rd_en <= '0';
--      tx_dv      <= '0';

--      -- Write to FIFO when byte received
--      if rx_done = '1' and fifo_full = '0' then
--        fifo_din   <= rx_byte;
--        fifo_wr_en <= '1';
--      end if;

--      -- Read from FIFO when TX is idle
--      if fifo_empty = '0' and tx_active = '0' then
--        tx_byte    <= fifo_dout;
--        fifo_rd_en <= '1';
--        tx_dv      <= '1';
--      end if;
--    end if;
--  end process;
process(Clk)
  begin
    if rising_edge(Clk) then
      fifo_wr_en <= '0';
      if rx_done = '1' and fifo_full = '0' then
        fifo_din   <= rx_byte;
        fifo_wr_en <= '1';
      end if;
    end if;
  end process;

  -- FIFO READ and TX Process with staging
  process(Clk)
  begin
    if rising_edge(Clk) then
      fifo_rd_en <= '0';
      tx_dv      <= '0';

      -- Load stage: fetch from FIFO
      if tx_load = '0' and tx_active = '0' and fifo_empty = '0' then
        fifo_rd_en <= '1';
        tx_data    <= fifo_dout;
        tx_load    <= '1';
      end if;

      -- TX stage: transmit the loaded byte
      if tx_load = '1' and tx_active = '0' then
        tx_byte <= tx_data;
        tx_dv   <= '1';
        tx_load <= '0';
      end if;
    end if;
  end process;


end Behavioral;

